/*
 * DTZ Core Api
 *
 * a generated client for the DTZ Core API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Container {
    #[serde(rename = "containerImage", skip_serializing_if = "Option::is_none")]
    pub container_image: Option<String>,
    #[serde(rename = "containerImageTag", skip_serializing_if = "Option::is_none")]
    pub container_image_tag: Option<String>,
    #[serde(rename = "containerImageVersion", skip_serializing_if = "Option::is_none")]
    pub container_image_version: Option<String>,
    #[serde(rename = "containerIdentity", skip_serializing_if = "Option::is_none")]
    pub container_identity: Option<String>,
    #[serde(rename = "containerPullUser", skip_serializing_if = "Option::is_none")]
    pub container_pull_user: Option<String>,
    #[serde(rename = "containerPullPwd", skip_serializing_if = "Option::is_none")]
    pub container_pull_pwd: Option<String>,
}

impl Container {
    pub fn new() -> Container {
        Container {
            container_image: None,
            container_image_tag: None,
            container_image_version: None,
            container_identity: None,
            container_pull_user: None,
            container_pull_pwd: None,
        }
    }
}


