/*
 * DTZ Core Api
 *
 * a generated client for the DTZ Core API
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StaticContentHttp {
    #[serde(rename = "header", skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<models::StaticContentHttpHeaderInner>>,
    /// base64 encoded content
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "content")]
    pub content: Vec<u8>,
}

impl StaticContentHttp {
    pub fn new(content: Vec<u8>) -> StaticContentHttp {
        StaticContentHttp {
            header: None,
            content,
        }
    }
}

