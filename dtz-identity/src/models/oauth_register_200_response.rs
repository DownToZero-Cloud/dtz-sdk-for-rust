/*
 * DTZ Identity
 *
 * a generated client for the DTZ Identity API
 *
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OauthRegister200Response {
    /// The registered client ID
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Optional client secret (if generated)
    #[serde(rename = "client_secret", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    /// When the client ID was issued
    #[serde(rename = "client_id_issued_at", skip_serializing_if = "Option::is_none")]
    pub client_id_issued_at: Option<String>,
    /// When the client secret expires (if applicable)
    #[serde(rename = "client_secret_expires_at", skip_serializing_if = "Option::is_none")]
    pub client_secret_expires_at: Option<String>,
}

impl OauthRegister200Response {
    pub fn new() -> OauthRegister200Response {
        OauthRegister200Response {
            client_id: None,
            client_secret: None,
            client_id_issued_at: None,
            client_secret_expires_at: None,
        }
    }
}

