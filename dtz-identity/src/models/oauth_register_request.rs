/*
 * DTZ Identity
 *
 * a generated client for the DTZ Identity API
 *
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OauthRegisterRequest {
    /// List of allowed redirect URIs
    #[serde(rename = "redirect_uris")]
    pub redirect_uris: Vec<String>,
    /// Optional client application name
    #[serde(rename = "client_name", skip_serializing_if = "Option::is_none")]
    pub client_name: Option<String>,
    /// Optional logo URI for the client
    #[serde(rename = "logo_uri", skip_serializing_if = "Option::is_none")]
    pub logo_uri: Option<String>,
}

impl OauthRegisterRequest {
    pub fn new(redirect_uris: Vec<String>) -> OauthRegisterRequest {
        OauthRegisterRequest {
            redirect_uris,
            client_name: None,
            logo_uri: None,
        }
    }
}

