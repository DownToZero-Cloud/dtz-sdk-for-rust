/*
 * DTZ Container Registry
 *
 * a generated client for the DTZ Container Registry API
 *
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use crate::models;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManifestResponse {
    #[serde(rename = "schemaVersion", skip_serializing_if = "Option::is_none")]
    pub schema_version: Option<i32>,
    #[serde(rename = "mediaType", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<String>,
    #[serde(rename = "manifests", skip_serializing_if = "Option::is_none")]
    pub manifests: Option<Vec<models::ManifestResponseManifestsInner>>,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Box<models::ManifestResponseSubject>>,
    #[serde(rename = "annotations", skip_serializing_if = "Option::is_none")]
    pub annotations: Option<std::collections::HashMap<String, String>>,
}

impl ManifestResponse {
    pub fn new() -> ManifestResponse {
        ManifestResponse {
            schema_version: None,
            media_type: None,
            manifests: None,
            subject: None,
            annotations: None,
        }
    }
}

