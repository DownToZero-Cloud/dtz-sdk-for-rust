openapi: 3.0.1
info:
  title: DTZ Identity
  version: 1.0.0
  description: a generated client for the DTZ Identity API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Jens Walter
    email: jens@apimeister.com
servers:
- url: https://identity.dtz.rocks/api/2021-02-21
paths:
  /auth/apikey:
    post:
      summary: authenticate with apikey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKey:
                  type: string
                contextId:
                  type: string
                  format: uuid
              required:
              - apiKey
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /signup:
    post:
      summary: user signup
      operationId: userSignup
      requestBody:
        description: signup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
        required: true
      responses:
        200:
          description: user created
  /authentication:
    get:
      summary: list user authentications
      operationId: listAuth
      responses:
        200:
          description: list of authentication
  /authentication/{auth_id}:
    post:
      summary: update an authentication
      operationId: authUpdate
      parameters:
        - in: path
          name: auth_id
          schema:
            type: string
          required: true
          description: authentication id
      requestBody:
        description: update an existing authnetication
        content:
          application/json:
            schema:
              type: object
              properties:
                authentication_id:
                  type: string
      responses:
        200:
          description: status
  /context/{context_id}/new:
    post:
      summary: create identity requirements for a new context
      operationId: newContext
      parameters:
        - in: path
          name: context_id
          schema:
            type: string
            format: uuid
          required: true
          description: context_id
      requestBody:
        description: context creation request
        content:
          application/json:
            schema:
              type: object
              properties:
                context_id:
                  type: string
                  format: uuid
                identity_id:
                  type: string
                  format: uuid
                service_principal_id:
                  type: string
                  format: uuid
      responses:
        200:
          description: status
  /identity/assume:
    post: 
      summary: assume identity
      operationId: assumeIdentity
      requestBody:
        description: assume different identity
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                identity_id:
                  type: string
                  format: uuid
      responses:
        200:
          description: success
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Invalid input
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /me:
    get:
      summary: get account stats
      operationId: getAccountStats
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        contextId:
                          type: string
                          format: uuid
                        count:
                          type: number
                  identityCount: 
                    type: number
                  authenticationCount:
                    type: number
  /me/identity/apikey:
    post:
      summary: create api key
      operationId: createApiKey
      requestBody:
        description: api key creation
        content:
          application/json:
            schema:
              type: object
              properties:
                context_id:
                  type: string
                  format: uuid
        required: true
      responses:
        200:
          description: success
  /me/identity/apikey/{apikey}:
    delete:
      summary: delete api key
      operationId: deleteApiKey
      parameters:
        - in: path
          name: apikey
          schema:
            type: string
            format: uuid
          required: true
          description: api key
      responses:
        200:
          description: success
  /me/roles/{roleId}:
    post:
      summary: create role assignment
      operationId: assignRole
      parameters:
        - in: path
          name: roleId
          schema:
            type: string
            format: uuid
          required: true
          description: role id
      responses:
        200:
          description: success
    delete:
      summary: remove role assignment from identity
      operationId: removeRoleAssignment
      parameters:
        - in: path
          name: roleId
          schema:
            type: string
            format: uuid
          required: true
          description: role id
      responses:
        200:
          description: success
  /token/auth:
    post:
      summary: user login
      operationId: userLogin
      requestBody:
        description: login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        200:
          description: success
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid input
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /roles:
    get:
      summary: get roles
      operationId: getRoles
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        roleId:
                          type: string
                          format: uuid
                        roleAlias:
                          type: string
                        roleScope:
                          type: string
                        contextId:
                          type: string
                          format: uuid
                        exposure:
                          type: string
                        assignedToUser:
                          type: boolean
components:
  schemas:
    ErrorResponse:
      required:
      - status
      type: object
      properties:
        status:
          type: string
    SignupRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        scopes:
          type: array
          items:
            type: string
    AuthResponse:
      required:
      - token
      type: object
      properties:
        token:
          type: string
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        scope:
          type: string
        token_type:
          type: string
        expires_in:
          type: number
      required:
      - access_token
      - token_type
      - expires_in
  securitySchemes:
    dtz_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://identity.dtz.rocks/oauth
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    dtz_auth2:
      type: apiKey
      in: header
      name: X-API-KEY
security:
  - dtz_auth: []
  - dtz_auth2: []