/*
 * DTZ Containers
 *
 * a generated client for the DTZ Containers API
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused)]
use crate::models;




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetJobs200ResponseInner {
    #[serde(rename = "id")]
    pub id: dtz_identifier::JobId,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "containerImage")]
    pub container_image: String,
    #[serde(rename = "containerPullUser", skip_serializing_if = "Option::is_none")]
    pub container_pull_user: Option<String>,
    #[serde(rename = "containerPullPwd", skip_serializing_if = "Option::is_none")]
    pub container_pull_pwd: Option<String>,
    #[serde(rename = "scheduleType")]
    pub schedule_type: String,
    #[serde(rename = "scheduleRepeat", skip_serializing_if = "Option::is_none")]
    pub schedule_repeat: Option<String>,
    #[serde(rename = "scheduleCron", skip_serializing_if = "Option::is_none")]
    pub schedule_cron: Option<String>,
    #[serde(rename = "scheduleCostOptimzation", skip_serializing_if = "Option::is_none")]
    pub schedule_cost_optimzation: Option<String>,
}

impl GetJobs200ResponseInner {
    pub fn new(id: dtz_identifier::JobId, name: String, container_image: String, schedule_type: String) -> GetJobs200ResponseInner {
        GetJobs200ResponseInner {
            id,
            name,
            container_image,
            container_pull_user: None,
            container_pull_pwd: None,
            schedule_type,
            schedule_repeat: None,
            schedule_cron: None,
            schedule_cost_optimzation: None,
        }
    }
}


