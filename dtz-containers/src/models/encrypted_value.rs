/*
 * DTZ Containers
 *
 * a generated client for the DTZ Containers API
 *
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused)]
use crate::models;




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EncryptedValue {
    /// Encryption algorithm or key reference, e.g. 'AES256:KEY1'.
    #[serde(rename = "encryptionKey", skip_serializing_if = "Option::is_none")]
    pub encryption_key: Option<String>,
    /// The base-64 encoded ciphertext.
    #[serde(rename = "encryptedValue", skip_serializing_if = "Option::is_none")]
    pub encrypted_value: Option<String>,
}

impl EncryptedValue {
    pub fn new() -> EncryptedValue {
        EncryptedValue {
            encryption_key: None,
            encrypted_value: None,
        }
    }
}


