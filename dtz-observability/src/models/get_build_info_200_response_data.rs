/*
 * DTZ Observability
 *
 * a generated client for the DTZ Observability API
 *
 * The version of the OpenAPI document: 1.0.9
 * Contact: jens@apimeister.com
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused)]
use crate::models;




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetBuildInfo200ResponseData {
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
    #[serde(rename = "branch", skip_serializing_if = "Option::is_none")]
    pub branch: Option<String>,
    #[serde(rename = "buildUser", skip_serializing_if = "Option::is_none")]
    pub build_user: Option<String>,
}

impl GetBuildInfo200ResponseData {
    pub fn new() -> GetBuildInfo200ResponseData {
        GetBuildInfo200ResponseData {
            version: None,
            revision: None,
            branch: None,
            build_user: None,
        }
    }
}


